[Repository]
Name=Darklings-FightingGame
URL=https://github.com/kidagine/Darklings-FightingGame.git

[Input]
# Description:

I have to implement the Feature in this game.

## Interactive Gothic Storybook Tutorial

The tutorial MUST be seamlessly integrated into gameplay using **subtle visual cues and cryptic ambient storytelling**. Players **learn by doing**, guided by **non-intrusive prompts** such as glowing glyphs, faint whispers, and ghostly afterimages. These elements MUST NOT disrupt gameplay flow. Mechanics should be **discovered organically**, allowing both newcomers and experienced players to engage at their own pace.

**Narrative-Driven Lessons**: Fundamental tutorials should be delivered through an **ominous, animated storybook**, blending lore with essential game mechanics. Each snippet SHOULD reveal both a lesson and a piece of the game's narrative.

**Variable Outcomes**: The tutorial MUST NOT follow a fixed path or scenario. First-time players MUST feel a sense of **agency**, discovering mechanics in a personal, emergent way.

## Requirements

- **Integration**: The tutorial system implementation **MUST** be fully separated from the existing dialogue system as well as from any other game systems to facilitate seamless integration and removal.
- **Scalability for Updates**: Utilize Unity's `ScriptableObjects` to store tutorial clue data, enabling rapid additions or modifications without modifying core logic.
- **Non-Intrusive Visual Cues**: Implement subtle visual indicators (e.g., glowing glyphs, ghostly afterimages) using Unityâ€™s URP shaders and particle systems to ensure a non-intrusive tutorial experience.
- **Dynamic Tutorial Paths**: Tutorial cues **MUST** be triggered dynamically based on player actions, proximity to interactive elements, or element appearance. This ensures that players discover mechanics organically without a predefined sequence, preserving gameplay fluidity.
- **Narrative Integration**: Implement a `StorybookManager` class to manage narrative-driven tutorial lessons. The storybook, containing all tutorial clues (one per page), **MUST** be accessible via the menu. Pages **MUST** be ordered according to the sequence in which the player encountered the clues during gameplay.
- **Integration with Existing Systems**: The tutorial system **MUST NOT** interrupt gameplay under any circumstances. Tutorial clues **MUST** only be displayed to the player who triggered them.
- **Accessibility**: Each tutorial clue **MUST** be displayed once and then made permanently accessible in the storybook.
- **Localization**: The tutorial is available **ONLY** in English.
- **AI Opponent Integration**: The tutorial is designed **EXCLUSIVELY** for teaching human players. Tutorial events **MUST NOT** be triggered for AI opponents unless the player must learn about AI-specific behaviors or interactions.
- **Hitstop**: Tutorial events **MUST NOT** trigger hitstop to prevent interference with other players' gameplay. However, tutorials **MAY** be triggered during hitstop for improved readability.
- **Rollback Netcode Compatibility**: The tutorial system is **EXCLUDED** from networking and **WILL NEVER** be subject to rollback netcode. It **MUST** be triggered **ONLY** for the local player and **MUST NOT** interfere in any way with remote players.
- **Replay System Integration**: Tutorial events **MUST NOT** be recorded or included in replays under any circumstances.
- **Save/Load System**: The order the clue was displayed to the player **MUST** be saved and loaded from the Unity PlayerPrefs.

# Action

Analyze the repository and propose an architecture design for the Interactive Gothic Storybook Tutorial feature based on the provided requirements. Double-check the proposal to ensure it implements all requirements without relying on the game code.

# Output Formatting

<Brief description of idea behind the proposal>

- <Class #1 Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>

- <Class #2 Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>

- ...

- <Class #N Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>
