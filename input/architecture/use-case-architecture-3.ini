[Repository]
Name=Darklings-FightingGame
URL=https://github.com/kidagine/Darklings-FightingGame.git

[Input]
I have the architectural design proposal for the feature in this game. 
You will review and modify the proposal to meet new requirements:
- Modify the TutorialTriggerSystem to be easily extensible, allowing for the addition and removal of different trigger conditions.
- Ensure trigger conditions can be applied to any object or prefab in the game.
- Allow in-place configuration without requiring additional objects.

# Interactive Gothic Storybook Tutorial

The tutorial MUST be seamlessly integrated into gameplay using **subtle visual cues and cryptic ambient storytelling**. Players **learn by doing**, guided by **non-intrusive prompts** such as glowing glyphs, faint whispers, and ghostly afterimages. These elements MUST NOT disrupt gameplay flow. Mechanics should be **discovered organically**, allowing both newcomers and experienced players to engage at their own pace.

**Narrative-Driven Lessons**: Fundamental tutorials should be delivered through an **ominous, animated storybook**, blending lore with essential game mechanics. Each snippet SHOULD reveal both a lesson and a piece of the game's narrative.

**Variable Outcomes**: The tutorial MUST NOT follow a fixed path or scenario. First-time players MUST feel a sense of **agency**, discovering mechanics in a personal, emergent way.

# Requirements

- **Integration**: The tutorial system implementation **MUST** be fully separated from the existing dialogue system as well as from any other game systems to facilitate seamless integration and removal.
- **Scalability for Updates**: Utilize Unity's `ScriptableObjects` to store tutorial clue data, enabling rapid additions or modifications without modifying core logic.
- **Non-Intrusive Visual Cues**: Implement subtle visual indicators (e.g., glowing glyphs, ghostly afterimages) using Unityâ€™s URP shaders and particle systems to ensure a non-intrusive tutorial experience.
- **Dynamic Tutorial Paths**: Tutorial cues **MUST** be triggered dynamically based on player actions, proximity to interactive elements, or element appearance. This ensures that players discover mechanics organically without a predefined sequence, preserving gameplay fluidity.
- **Narrative Integration**: Implement a `StorybookManager` class to manage narrative-driven tutorial lessons. The storybook, containing all tutorial clues (one per page), **MUST** be accessible via the menu. Pages **MUST** be ordered according to the sequence in which the player encountered the clues during gameplay.
- **Integration with Existing Systems**: The tutorial system **MUST NOT** interrupt gameplay under any circumstances. Tutorial clues **MUST** only be displayed to the player who triggered them.
- **Accessibility**: Each tutorial clue **MUST** be displayed once and then made permanently accessible in the storybook.
- **Localization**: The tutorial is available **ONLY** in English.
- **AI Opponent Integration**: The tutorial is designed **EXCLUSIVELY** for teaching human players. Tutorial events **MUST NOT** be triggered for AI opponents unless the player must learn about AI-specific behaviors or interactions.
- **Hitstop**: Tutorial events **MUST NOT** trigger hitstop to prevent interference with other players' gameplay. However, tutorials **MAY** be triggered during hitstop for improved readability.
- **Rollback Netcode Compatibility**: The tutorial system is **EXCLUDED** from networking and **WILL NEVER** be subject to rollback netcode. It **MUST** be triggered **ONLY** for the local player and **MUST NOT** interfere in any way with remote players.
- **Replay System Integration**: Tutorial events **MUST NOT** be recorded or included in replays under any circumstances.
- **Save/Load System**: The state of clues (i.e. was the clue ever displayed) **MUST** be saved and loaded from the Unity PlayerPrefs.

# Proposed Architecture

1. **TutorialClueSO** : [ScriptableObject] - Stores tutorial clue data. The name of the object serves as the clue unique ID.
   - **clueText**: `string` - The narrative or instructional text for the clue.
   - **visualCuePrefab**: `GameObject` - Prefab for the visual cue (e.g., glowing glyphs, ghostly afterimages).
   - **triggerCondition**: `enum` - Condition for triggering the clue (e.g., player action, proximity, element appearance).
   - **audioCue**: `AudioClip` - Optional audio cue (e.g., faint whispers) to accompany the visual cue.
   - **storybookPage**: `Sprite` - The corresponding page in the storybook for this clue.

2. **StorybookManager** : [MonoBehaviour] - Manages narrative-driven tutorial lessons
   - **cluesDiscovered**: `List<TutorialClueSO>` - Ordered list of clues discovered by the player.
   - **storybookUI**: `GameObject` - Reference to the storybook UI in the menu.
   - **currentPageIndex**: `int` - Tracks the currently displayed page in the storybook.
   - **LoadStorybook()**: `void` - Loads the storybook UI and displays the discovered clues in order.
   - **AddClue(TutorialClueSO clue)**: `void` - Adds a new clue to the list and updates the storybook.
   - **SaveCluesToPlayerPrefs()**: `void` - Saves the order of discovered clues to Unity's `PlayerPrefs`.
   - **LoadCluesFromPlayerPrefs()**: `void` - Loads the order of discovered clues from `PlayerPrefs`.

3. **TutorialTriggerSystem** : [MonoBehaviour] - Dynamically triggers tutorial cues**
   - **activeClues**: `List<TutorialClueSO>` - List of clues that can be triggered based on conditions.
   - **playerProximityRadius**: `float` - Radius for proximity-based triggers.
   - **CheckTriggers()**: `void` - Checks for trigger conditions (e.g., player actions, proximity) and activates the appropriate clue.
   - **ActivateClue(TutorialClueSO clue)**: `void` - Displays the visual and audio cues for the clue and adds it to the `StorybookManager`.

4. **VisualCueManager** : [MonoBehaviour] - Manages non-intrusive visual cues**
   - **urpShader**: `Shader` - URP shader for rendering visual cues (e.g., glowing glyphs).
   - **particleSystem**: `ParticleSystem` - Particle system for ghostly afterimages.
   - **DisplayVisualCue(TutorialClueSO clue)**: `void` - Instantiates and displays the visual cue prefab.
   - **HideVisualCue()**: `void` - Hides the visual cue after a set duration.

5. **AudioCueManager** : [MonoBehaviour] - Manages audio cues**
   - **audioSource**: `AudioSource` - Audio source for playing tutorial-related sounds.
   - **PlayAudioCue(TutorialClueSO clue)**: `void` - Plays the audio cue associated with the clue.
   - **StopAudioCue()**: `void` - Stops the audio cue after a set duration.

6. **TutorialSaveSystem** : [MonoBehaviour] - Handles saving and loading tutorial progress**
   - **SaveTutorialProgress()**: `void` - Saves the order of discovered clues and other tutorial progress to `PlayerPrefs`.
   - **LoadTutorialProgress()**: `void` - Loads the order of discovered clues and other tutorial progress from `PlayerPrefs`.

# Output Formatting

<Brief description of idea behind the proposal>

- <Class #1 Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>

- <Class #2 Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>

- ...

- <Class #N Name> : [Base Class] - <Responsibility>
   - <Member #1 Name> : Type - <Responsibility>
   - <Member #2 Name> : Type - <Responsibility>
   - ...
   - <Member #N Name> : Type - <Responsibility>

