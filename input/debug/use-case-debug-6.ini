[Repository]
Name=ECS Racing
URL=https://github.com/Unity-Technologies/ECS-Network-Racing-Sample.git

[Input]
Here's unfixed code

    /// <summary>
    /// Change the state for the race when countdown has finished
    /// </summary>
    [UpdateBefore(typeof(RaceIntroSystem))]
    [UpdateAfter(typeof(UpdateTimerSystem))]
    [WorldSystemFilter(WorldSystemFilterFlags.ServerSimulation)]
    public partial struct RaceCountdownSystem : ISystem
    {
        public void OnCreate(ref SystemState state)
        {
            state.RequireForUpdate<Race>();
        }

        [BurstCompile]
        public void OnUpdate(ref SystemState state)
        {
            var race = GetSingletonRW<Race>().ValueRW;

            if (!race.IsCountDown)
            {
                return;
            }

            if (race.TimerFinished)
            {
                race.SetRaceState(RaceState.InProgress);
                race.InitialTime = UnityEngine.Time.realtimeSinceStartup;

                // Change all the players state
                var changePlayerStateJob = new ChangePlayerStateJob
                {
                    CurrentState = PlayerState.Countdown,
                    TargetState = PlayerState.Race
                };
                state.Dependency = changePlayerStateJob.ScheduleParallel(state.Dependency);
            }

            SetSingleton(race);
        }
    }

and here's fixed one 

    /// <summary>
    /// Change the state for the race when countdown has finished
    /// </summary>
    [UpdateBefore(typeof(RaceIntroSystem))]
    [UpdateAfter(typeof(UpdateTimerSystem))]
    [WorldSystemFilter(WorldSystemFilterFlags.ServerSimulation)]
    public partial struct RaceCountdownSystem : ISystem
    {
        public void OnCreate(ref SystemState state)
        {
            state.RequireForUpdate<Race>();
        }

        [BurstCompile]
        public void OnUpdate(ref SystemState state)
        {
            var race = GetSingletonRW<Race>().ValueRW;

            if (!race.IsCountDown)
            {
                return;
            }

            if (race.TimerFinished)
            {
                race.SetRaceState(RaceState.InProgress);
                race.InitialTime = state.WorldUnmanaged.Time.ElapsedTime;

                // Change all the players state
                var changePlayerStateJob = new ChangePlayerStateJob
                {
                    CurrentState = PlayerState.Countdown,
                    TargetState = PlayerState.Race
                };
                state.Dependency = changePlayerStateJob.ScheduleParallel(state.Dependency);
            }

            SetSingleton(race);
        }
    }

Explain the fix.


[Evaluator]
Explained the fix logically and refers to existing rules for ECS.